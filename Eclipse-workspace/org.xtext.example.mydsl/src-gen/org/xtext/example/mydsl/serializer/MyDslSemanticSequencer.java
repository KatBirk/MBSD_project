/*
 * generated by Xtext 2.37.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.Chapter;
import org.xtext.example.mydsl.myDsl.Choice;
import org.xtext.example.mydsl.myDsl.GoToChapter;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Property;
import org.xtext.example.mydsl.myDsl.Scenario;
import org.xtext.example.mydsl.myDsl.StartPoint;
import org.xtext.example.mydsl.myDsl.State;
import org.xtext.example.mydsl.myDsl.StateChange;
import org.xtext.example.mydsl.myDsl.Story;
import org.xtext.example.mydsl.myDsl.Text;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.CHAPTER:
				sequence_Chapter(context, (Chapter) semanticObject); 
				return; 
			case MyDslPackage.CHOICE:
				sequence_Choice(context, (Choice) semanticObject); 
				return; 
			case MyDslPackage.GO_TO_CHAPTER:
				sequence_GoToChapter(context, (GoToChapter) semanticObject); 
				return; 
			case MyDslPackage.PROPERTY:
				sequence_Property(context, (Property) semanticObject); 
				return; 
			case MyDslPackage.SCENARIO:
				sequence_Scenario(context, (Scenario) semanticObject); 
				return; 
			case MyDslPackage.START_POINT:
				sequence_StartPoint(context, (StartPoint) semanticObject); 
				return; 
			case MyDslPackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			case MyDslPackage.STATE_CHANGE:
				sequence_StateChange(context, (StateChange) semanticObject); 
				return; 
			case MyDslPackage.STORY:
				sequence_Story(context, (Story) semanticObject); 
				return; 
			case MyDslPackage.TEXT:
				sequence_Text(context, (Text) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Chapter returns Chapter
	 *
	 * Constraint:
	 *     (name=ID entrances+=StartPoint scenarios+=Scenario+)
	 * </pre>
	 */
	protected void sequence_Chapter(ISerializationContext context, Chapter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Choice returns Choice
	 *
	 * Constraint:
	 *     (scenarioId=[Scenario|ID] description=STRING (stateChanges+=StateChange stateChanges+=StateChange*)?)
	 * </pre>
	 */
	protected void sequence_Choice(ISerializationContext context, Choice semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GoToChapter returns GoToChapter
	 *
	 * Constraint:
	 *     (chapterId=[Chapter|ID] entrance=[StartPoint|ID])
	 * </pre>
	 */
	protected void sequence_GoToChapter(ISerializationContext context, GoToChapter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.GO_TO_CHAPTER__CHAPTER_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.GO_TO_CHAPTER__CHAPTER_ID));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.GO_TO_CHAPTER__ENTRANCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.GO_TO_CHAPTER__ENTRANCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGoToChapterAccess().getChapterIdChapterIDTerminalRuleCall_3_0_1(), semanticObject.eGet(MyDslPackage.Literals.GO_TO_CHAPTER__CHAPTER_ID, false));
		feeder.accept(grammarAccess.getGoToChapterAccess().getEntranceStartPointIDTerminalRuleCall_7_0_1(), semanticObject.eGet(MyDslPackage.Literals.GO_TO_CHAPTER__ENTRANCE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Property returns Property
	 *
	 * Constraint:
	 *     (name=ID type=Type value=Value)
	 * </pre>
	 */
	protected void sequence_Property(ISerializationContext context, Property semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PROPERTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PROPERTY__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PROPERTY__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PROPERTY__TYPE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PROPERTY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PROPERTY__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPropertyAccess().getTypeTypeEnumRuleCall_7_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getPropertyAccess().getValueValueParserRuleCall_11_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Scenario returns Scenario
	 *
	 * Constraint:
	 *     (name=ID text=Text? (choices+=Choice+ | goto=GoToChapter)?)
	 * </pre>
	 */
	protected void sequence_Scenario(ISerializationContext context, Scenario semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StartPoint returns StartPoint
	 *
	 * Constraint:
	 *     (name=ID scenarioId=[Scenario|ID])
	 * </pre>
	 */
	protected void sequence_StartPoint(ISerializationContext context, StartPoint semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.START_POINT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.START_POINT__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.START_POINT__SCENARIO_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.START_POINT__SCENARIO_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStartPointAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getStartPointAccess().getScenarioIdScenarioIDTerminalRuleCall_2_0_1(), semanticObject.eGet(MyDslPackage.Literals.START_POINT__SCENARIO_ID, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StateChange returns StateChange
	 *
	 * Constraint:
	 *     (variable=[Property|ID] operator=Operator value=Value)
	 * </pre>
	 */
	protected void sequence_StateChange(ISerializationContext context, StateChange semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.STATE_CHANGE__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.STATE_CHANGE__VARIABLE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.STATE_CHANGE__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.STATE_CHANGE__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.STATE_CHANGE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.STATE_CHANGE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStateChangeAccess().getVariablePropertyIDTerminalRuleCall_0_0_1(), semanticObject.eGet(MyDslPackage.Literals.STATE_CHANGE__VARIABLE, false));
		feeder.accept(grammarAccess.getStateChangeAccess().getOperatorOperatorEnumRuleCall_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getStateChangeAccess().getValueValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     State returns State
	 *
	 * Constraint:
	 *     properties+=Property+
	 * </pre>
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Story returns Story
	 *
	 * Constraint:
	 *     (name=ID state=State chapters+=Chapter+)
	 * </pre>
	 */
	protected void sequence_Story(ISerializationContext context, Story semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Text returns Text
	 *
	 * Constraint:
	 *     text=STRING
	 * </pre>
	 */
	protected void sequence_Text(ISerializationContext context, Text semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TEXT__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TEXT__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTextAccess().getTextSTRINGTerminalRuleCall_1_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
}
