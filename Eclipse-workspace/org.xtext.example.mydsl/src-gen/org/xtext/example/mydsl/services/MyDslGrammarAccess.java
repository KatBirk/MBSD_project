/*
 * generated by Xtext 2.37.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class StoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Story");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTORYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStateStateParserRuleCall_3_0 = (RuleCall)cStateAssignment_3.eContents().get(0);
		private final Assignment cChaptersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cChaptersChapterParserRuleCall_4_0 = (RuleCall)cChaptersAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Story:
		//    'STORY' name=ID '{'
		//        state=State
		//        chapters+=Chapter+
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'STORY' name=ID '{'
		//    state=State
		//    chapters+=Chapter+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'STORY'
		public Keyword getSTORYKeyword_0() { return cSTORYKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//state=State
		public Assignment getStateAssignment_3() { return cStateAssignment_3; }
		
		//State
		public RuleCall getStateStateParserRuleCall_3_0() { return cStateStateParserRuleCall_3_0; }
		
		//chapters+=Chapter+
		public Assignment getChaptersAssignment_4() { return cChaptersAssignment_4; }
		
		//Chapter
		public RuleCall getChaptersChapterParserRuleCall_4_0() { return cChaptersChapterParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertiesPropertyParserRuleCall_2_0 = (RuleCall)cPropertiesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//State:
		//    'STATE' '{'
		//        properties+=Property*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'STATE' '{'
		//    properties+=Property*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'STATE'
		public Keyword getSTATEKeyword_0() { return cSTATEKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_2_0() { return cPropertiesPropertyParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPROPERTYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cTypeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTypeTypeEnumRuleCall_7_0 = (RuleCall)cTypeAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cValueKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cEqualsSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cValueAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cValueValueParserRuleCall_11_0 = (RuleCall)cValueAssignment_11.eContents().get(0);
		
		//Property:
		//    'PROPERTY' 'name' '=' name=ID ',' 'type' '=' type=Type ',' 'value' '=' value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//'PROPERTY' 'name' '=' name=ID ',' 'type' '=' type=Type ',' 'value' '=' value=Value
		public Group getGroup() { return cGroup; }
		
		//'PROPERTY'
		public Keyword getPROPERTYKeyword_0() { return cPROPERTYKeyword_0; }
		
		//'name'
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'type'
		public Keyword getTypeKeyword_5() { return cTypeKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//type=Type
		public Assignment getTypeAssignment_7() { return cTypeAssignment_7; }
		
		//Type
		public RuleCall getTypeTypeEnumRuleCall_7_0() { return cTypeTypeEnumRuleCall_7_0; }
		
		//','
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//'value'
		public Keyword getValueKeyword_9() { return cValueKeyword_9; }
		
		//'='
		public Keyword getEqualsSignKeyword_10() { return cEqualsSignKeyword_10; }
		
		//value=Value
		public Assignment getValueAssignment_11() { return cValueAssignment_11; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_11_0() { return cValueValueParserRuleCall_11_0; }
	}
	public class ChapterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Chapter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCHAPTERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEntrancesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cEntrancesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cEntrancesStartPointParserRuleCall_8_0 = (RuleCall)cEntrancesAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cLeftCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cScenariosAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cScenariosScenarioParserRuleCall_11_0 = (RuleCall)cScenariosAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Chapter:
		//    'CHAPTER' 'id' '=' name=ID ',' 'entrances' '=' '(' entrances+=StartPoint ')' '{'
		//        scenarios+=Scenario+
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'CHAPTER' 'id' '=' name=ID ',' 'entrances' '=' '(' entrances+=StartPoint ')' '{'
		//    scenarios+=Scenario+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'CHAPTER'
		public Keyword getCHAPTERKeyword_0() { return cCHAPTERKeyword_0; }
		
		//'id'
		public Keyword getIdKeyword_1() { return cIdKeyword_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'entrances'
		public Keyword getEntrancesKeyword_5() { return cEntrancesKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }
		
		//entrances+=StartPoint
		public Assignment getEntrancesAssignment_8() { return cEntrancesAssignment_8; }
		
		//StartPoint
		public RuleCall getEntrancesStartPointParserRuleCall_8_0() { return cEntrancesStartPointParserRuleCall_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_10() { return cLeftCurlyBracketKeyword_10; }
		
		//scenarios+=Scenario+
		public Assignment getScenariosAssignment_11() { return cScenariosAssignment_11; }
		
		//Scenario
		public RuleCall getScenariosScenarioParserRuleCall_11_0() { return cScenariosScenarioParserRuleCall_11_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class StartPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.StartPoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cScenarioIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cScenarioIdScenarioCrossReference_2_0 = (CrossReference)cScenarioIdAssignment_2.eContents().get(0);
		private final RuleCall cScenarioIdScenarioIDTerminalRuleCall_2_0_1 = (RuleCall)cScenarioIdScenarioCrossReference_2_0.eContents().get(1);
		
		//StartPoint:
		//    name=ID ',' scenarioId=[Scenario|ID];
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ',' scenarioId=[Scenario|ID]
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//scenarioId=[Scenario|ID]
		public Assignment getScenarioIdAssignment_2() { return cScenarioIdAssignment_2; }
		
		//[Scenario|ID]
		public CrossReference getScenarioIdScenarioCrossReference_2_0() { return cScenarioIdScenarioCrossReference_2_0; }
		
		//ID
		public RuleCall getScenarioIdScenarioIDTerminalRuleCall_2_0_1() { return cScenarioIdScenarioIDTerminalRuleCall_2_0_1; }
	}
	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSCENARIOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTextAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTextTextParserRuleCall_5_0 = (RuleCall)cTextAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cChoicesAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cChoicesChoiceParserRuleCall_6_0_0 = (RuleCall)cChoicesAssignment_6_0.eContents().get(0);
		private final Keyword cENDKeyword_6_1 = (Keyword)cAlternatives_6.eContents().get(1);
		private final Assignment cGotoAssignment_6_2 = (Assignment)cAlternatives_6.eContents().get(2);
		private final RuleCall cGotoGoToChapterParserRuleCall_6_2_0 = (RuleCall)cGotoAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Scenario:
		//    'SCENARIO' 'id' '=' name=ID '{'
		//        text=Text?
		//        ( choices+=Choice+ | 'END' | goto=GoToChapter )
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'SCENARIO' 'id' '=' name=ID '{'
		//    text=Text?
		//    ( choices+=Choice+ | 'END' | goto=GoToChapter )
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'SCENARIO'
		public Keyword getSCENARIOKeyword_0() { return cSCENARIOKeyword_0; }
		
		//'id'
		public Keyword getIdKeyword_1() { return cIdKeyword_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//text=Text?
		public Assignment getTextAssignment_5() { return cTextAssignment_5; }
		
		//Text
		public RuleCall getTextTextParserRuleCall_5_0() { return cTextTextParserRuleCall_5_0; }
		
		//( choices+=Choice+ | 'END' | goto=GoToChapter )
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//choices+=Choice+
		public Assignment getChoicesAssignment_6_0() { return cChoicesAssignment_6_0; }
		
		//Choice
		public RuleCall getChoicesChoiceParserRuleCall_6_0_0() { return cChoicesChoiceParserRuleCall_6_0_0; }
		
		//'END'
		public Keyword getENDKeyword_6_1() { return cENDKeyword_6_1; }
		
		//goto=GoToChapter
		public Assignment getGotoAssignment_6_2() { return cGotoAssignment_6_2; }
		
		//GoToChapter
		public RuleCall getGotoGoToChapterParserRuleCall_6_2_0() { return cGotoGoToChapterParserRuleCall_6_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Text");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTEXTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//Text:
		//    'TEXT' text=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'TEXT' text=STRING
		public Group getGroup() { return cGroup; }
		
		//'TEXT'
		public Keyword getTEXTKeyword_0() { return cTEXTKeyword_0; }
		
		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
	}
	public class ChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Choice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCHOICEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cScenarioIdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cScenarioIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cScenarioIdScenarioCrossReference_3_0 = (CrossReference)cScenarioIdAssignment_3.eContents().get(0);
		private final RuleCall cScenarioIdScenarioIDTerminalRuleCall_3_0_1 = (RuleCall)cScenarioIdScenarioCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cDescriptionKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDescriptionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_7_0 = (RuleCall)cDescriptionAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cStateChangesAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cStateChangesStateChangeParserRuleCall_8_1_0 = (RuleCall)cStateChangesAssignment_8_1.eContents().get(0);
		private final Group cGroup_8_2 = (Group)cGroup_8.eContents().get(2);
		private final Keyword cCommaKeyword_8_2_0 = (Keyword)cGroup_8_2.eContents().get(0);
		private final Assignment cStateChangesAssignment_8_2_1 = (Assignment)cGroup_8_2.eContents().get(1);
		private final RuleCall cStateChangesStateChangeParserRuleCall_8_2_1_0 = (RuleCall)cStateChangesAssignment_8_2_1.eContents().get(0);
		
		//Choice:
		//    'CHOICE' 'scenarioId' '=' scenarioId=[Scenario|ID] ',' 'description' '=' description=STRING ( ',' stateChanges+=StateChange ( ',' stateChanges+=StateChange )* )?;
		@Override public ParserRule getRule() { return rule; }
		
		//'CHOICE' 'scenarioId' '=' scenarioId=[Scenario|ID] ',' 'description' '=' description=STRING ( ',' stateChanges+=StateChange ( ',' stateChanges+=StateChange )* )?
		public Group getGroup() { return cGroup; }
		
		//'CHOICE'
		public Keyword getCHOICEKeyword_0() { return cCHOICEKeyword_0; }
		
		//'scenarioId'
		public Keyword getScenarioIdKeyword_1() { return cScenarioIdKeyword_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//scenarioId=[Scenario|ID]
		public Assignment getScenarioIdAssignment_3() { return cScenarioIdAssignment_3; }
		
		//[Scenario|ID]
		public CrossReference getScenarioIdScenarioCrossReference_3_0() { return cScenarioIdScenarioCrossReference_3_0; }
		
		//ID
		public RuleCall getScenarioIdScenarioIDTerminalRuleCall_3_0_1() { return cScenarioIdScenarioIDTerminalRuleCall_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'description'
		public Keyword getDescriptionKeyword_5() { return cDescriptionKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_7() { return cDescriptionAssignment_7; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_7_0() { return cDescriptionSTRINGTerminalRuleCall_7_0; }
		
		//( ',' stateChanges+=StateChange ( ',' stateChanges+=StateChange )* )?
		public Group getGroup_8() { return cGroup_8; }
		
		//','
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }
		
		//stateChanges+=StateChange
		public Assignment getStateChangesAssignment_8_1() { return cStateChangesAssignment_8_1; }
		
		//StateChange
		public RuleCall getStateChangesStateChangeParserRuleCall_8_1_0() { return cStateChangesStateChangeParserRuleCall_8_1_0; }
		
		//( ',' stateChanges+=StateChange )*
		public Group getGroup_8_2() { return cGroup_8_2; }
		
		//','
		public Keyword getCommaKeyword_8_2_0() { return cCommaKeyword_8_2_0; }
		
		//stateChanges+=StateChange
		public Assignment getStateChangesAssignment_8_2_1() { return cStateChangesAssignment_8_2_1; }
		
		//StateChange
		public RuleCall getStateChangesStateChangeParserRuleCall_8_2_1_0() { return cStateChangesStateChangeParserRuleCall_8_2_1_0; }
	}
	public class StateChangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.StateChange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariablePropertyCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariablePropertyIDTerminalRuleCall_0_0_1 = (RuleCall)cVariablePropertyCrossReference_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//StateChange:
		//    variable=[Property|ID] operator=Operator value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[Property|ID] operator=Operator value=Value
		public Group getGroup() { return cGroup; }
		
		//variable=[Property|ID]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//[Property|ID]
		public CrossReference getVariablePropertyCrossReference_0_0() { return cVariablePropertyCrossReference_0_0; }
		
		//ID
		public RuleCall getVariablePropertyIDTerminalRuleCall_0_0_1() { return cVariablePropertyIDTerminalRuleCall_0_0_1; }
		
		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class GoToChapterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.GoToChapter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGOTOCHAPTERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cChapterIdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cChapterIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cChapterIdChapterCrossReference_3_0 = (CrossReference)cChapterIdAssignment_3.eContents().get(0);
		private final RuleCall cChapterIdChapterIDTerminalRuleCall_3_0_1 = (RuleCall)cChapterIdChapterCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEntranceKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cEntranceAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cEntranceStartPointCrossReference_7_0 = (CrossReference)cEntranceAssignment_7.eContents().get(0);
		private final RuleCall cEntranceStartPointIDTerminalRuleCall_7_0_1 = (RuleCall)cEntranceStartPointCrossReference_7_0.eContents().get(1);
		
		//GoToChapter:
		//    'GOTOCHAPTER' 'chapterId' '=' chapterId=[Chapter|ID] ',' 'entrance' '=' entrance=[StartPoint|ID];
		@Override public ParserRule getRule() { return rule; }
		
		//'GOTOCHAPTER' 'chapterId' '=' chapterId=[Chapter|ID] ',' 'entrance' '=' entrance=[StartPoint|ID]
		public Group getGroup() { return cGroup; }
		
		//'GOTOCHAPTER'
		public Keyword getGOTOCHAPTERKeyword_0() { return cGOTOCHAPTERKeyword_0; }
		
		//'chapterId'
		public Keyword getChapterIdKeyword_1() { return cChapterIdKeyword_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//chapterId=[Chapter|ID]
		public Assignment getChapterIdAssignment_3() { return cChapterIdAssignment_3; }
		
		//[Chapter|ID]
		public CrossReference getChapterIdChapterCrossReference_3_0() { return cChapterIdChapterCrossReference_3_0; }
		
		//ID
		public RuleCall getChapterIdChapterIDTerminalRuleCall_3_0_1() { return cChapterIdChapterIDTerminalRuleCall_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'entrance'
		public Keyword getEntranceKeyword_5() { return cEntranceKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//entrance=[StartPoint|ID]
		public Assignment getEntranceAssignment_7() { return cEntranceAssignment_7; }
		
		//[StartPoint|ID]
		public CrossReference getEntranceStartPointCrossReference_7_0() { return cEntranceStartPointCrossReference_7_0; }
		
		//ID
		public RuleCall getEntranceStartPointIDTerminalRuleCall_7_0_1() { return cEntranceStartPointIDTerminalRuleCall_7_0_1; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cAlternatives.eContents().get(2);
		private final Keyword cTrueKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cFalseKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//Value:
		//    STRING | INT | ('true' | 'false')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | INT | ('true' | 'false')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//('true' | 'false')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'true'
		public Keyword getTrueKeyword_2_0() { return cTrueKeyword_2_0; }
		
		//'false'
		public Keyword getFalseKeyword_2_1() { return cFalseKeyword_2_1; }
	}
	
	public class TypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTEXTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTEXTTEXTKeyword_0_0 = (Keyword)cTEXTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNUMBEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNUMBERNUMBERKeyword_1_0 = (Keyword)cNUMBEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBOOLEANYESNOKeyword_2_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLISTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLISTLISTKeyword_3_0 = (Keyword)cLISTEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Type:
		//    TEXT = 'TEXT' |
		//    NUMBER = 'NUMBER' |
		//    BOOLEAN = 'YES/NO' |
		//    LIST = 'LIST'
		//;
		public EnumRule getRule() { return rule; }
		
		//TEXT = 'TEXT' |
		//NUMBER = 'NUMBER' |
		//BOOLEAN = 'YES/NO' |
		//LIST = 'LIST'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TEXT = 'TEXT'
		public EnumLiteralDeclaration getTEXTEnumLiteralDeclaration_0() { return cTEXTEnumLiteralDeclaration_0; }
		
		//'TEXT'
		public Keyword getTEXTTEXTKeyword_0_0() { return cTEXTTEXTKeyword_0_0; }
		
		//NUMBER = 'NUMBER'
		public EnumLiteralDeclaration getNUMBEREnumLiteralDeclaration_1() { return cNUMBEREnumLiteralDeclaration_1; }
		
		//'NUMBER'
		public Keyword getNUMBERNUMBERKeyword_1_0() { return cNUMBERNUMBERKeyword_1_0; }
		
		//BOOLEAN = 'YES/NO'
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_2() { return cBOOLEANEnumLiteralDeclaration_2; }
		
		//'YES/NO'
		public Keyword getBOOLEANYESNOKeyword_2_0() { return cBOOLEANYESNOKeyword_2_0; }
		
		//LIST = 'LIST'
		public EnumLiteralDeclaration getLISTEnumLiteralDeclaration_3() { return cLISTEnumLiteralDeclaration_3; }
		
		//'LIST'
		public Keyword getLISTLISTKeyword_3_0() { return cLISTLISTKeyword_3_0; }
	}
	public class OperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cASSIGNEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cASSIGNEqualsSignKeyword_0_0 = (Keyword)cASSIGNEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPLUSPlusSignKeyword_1_0 = (Keyword)cPLUSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMINUSHyphenMinusKeyword_2_0 = (Keyword)cMINUSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMULTIPLYEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMULTIPLYAsteriskKeyword_3_0 = (Keyword)cMULTIPLYEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDIVIDEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDIVIDESolidusKeyword_4_0 = (Keyword)cDIVIDEEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum Operator:
		//    ASSIGN = '=' |
		//    PLUS = '+' |
		//    MINUS = '-' |
		//    MULTIPLY = '*' |
		//    DIVIDE = '/'
		//;
		public EnumRule getRule() { return rule; }
		
		//ASSIGN = '=' |
		//PLUS = '+' |
		//MINUS = '-' |
		//MULTIPLY = '*' |
		//DIVIDE = '/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ASSIGN = '='
		public EnumLiteralDeclaration getASSIGNEnumLiteralDeclaration_0() { return cASSIGNEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getASSIGNEqualsSignKeyword_0_0() { return cASSIGNEqualsSignKeyword_0_0; }
		
		//PLUS = '+'
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_1() { return cPLUSEnumLiteralDeclaration_1; }
		
		//'+'
		public Keyword getPLUSPlusSignKeyword_1_0() { return cPLUSPlusSignKeyword_1_0; }
		
		//MINUS = '-'
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_2() { return cMINUSEnumLiteralDeclaration_2; }
		
		//'-'
		public Keyword getMINUSHyphenMinusKeyword_2_0() { return cMINUSHyphenMinusKeyword_2_0; }
		
		//MULTIPLY = '*'
		public EnumLiteralDeclaration getMULTIPLYEnumLiteralDeclaration_3() { return cMULTIPLYEnumLiteralDeclaration_3; }
		
		//'*'
		public Keyword getMULTIPLYAsteriskKeyword_3_0() { return cMULTIPLYAsteriskKeyword_3_0; }
		
		//DIVIDE = '/'
		public EnumLiteralDeclaration getDIVIDEEnumLiteralDeclaration_4() { return cDIVIDEEnumLiteralDeclaration_4; }
		
		//'/'
		public Keyword getDIVIDESolidusKeyword_4_0() { return cDIVIDESolidusKeyword_4_0; }
	}
	
	private final StoryElements pStory;
	private final StateElements pState;
	private final PropertyElements pProperty;
	private final ChapterElements pChapter;
	private final StartPointElements pStartPoint;
	private final ScenarioElements pScenario;
	private final TextElements pText;
	private final ChoiceElements pChoice;
	private final StateChangeElements pStateChange;
	private final GoToChapterElements pGoToChapter;
	private final TypeElements eType;
	private final OperatorElements eOperator;
	private final ValueElements pValue;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStory = new StoryElements();
		this.pState = new StateElements();
		this.pProperty = new PropertyElements();
		this.pChapter = new ChapterElements();
		this.pStartPoint = new StartPointElements();
		this.pScenario = new ScenarioElements();
		this.pText = new TextElements();
		this.pChoice = new ChoiceElements();
		this.pStateChange = new StateChangeElements();
		this.pGoToChapter = new GoToChapterElements();
		this.eType = new TypeElements();
		this.eOperator = new OperatorElements();
		this.pValue = new ValueElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Story:
	//    'STORY' name=ID '{'
	//        state=State
	//        chapters+=Chapter+
	//    '}';
	public StoryElements getStoryAccess() {
		return pStory;
	}
	
	public ParserRule getStoryRule() {
		return getStoryAccess().getRule();
	}
	
	//State:
	//    'STATE' '{'
	//        properties+=Property*
	//    '}';
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Property:
	//    'PROPERTY' 'name' '=' name=ID ',' 'type' '=' type=Type ',' 'value' '=' value=Value;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//Chapter:
	//    'CHAPTER' 'id' '=' name=ID ',' 'entrances' '=' '(' entrances+=StartPoint ')' '{'
	//        scenarios+=Scenario+
	//    '}';
	public ChapterElements getChapterAccess() {
		return pChapter;
	}
	
	public ParserRule getChapterRule() {
		return getChapterAccess().getRule();
	}
	
	//StartPoint:
	//    name=ID ',' scenarioId=[Scenario|ID];
	public StartPointElements getStartPointAccess() {
		return pStartPoint;
	}
	
	public ParserRule getStartPointRule() {
		return getStartPointAccess().getRule();
	}
	
	//Scenario:
	//    'SCENARIO' 'id' '=' name=ID '{'
	//        text=Text?
	//        ( choices+=Choice+ | 'END' | goto=GoToChapter )
	//    '}';
	public ScenarioElements getScenarioAccess() {
		return pScenario;
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}
	
	//Text:
	//    'TEXT' text=STRING;
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}
	
	//Choice:
	//    'CHOICE' 'scenarioId' '=' scenarioId=[Scenario|ID] ',' 'description' '=' description=STRING ( ',' stateChanges+=StateChange ( ',' stateChanges+=StateChange )* )?;
	public ChoiceElements getChoiceAccess() {
		return pChoice;
	}
	
	public ParserRule getChoiceRule() {
		return getChoiceAccess().getRule();
	}
	
	//StateChange:
	//    variable=[Property|ID] operator=Operator value=Value;
	public StateChangeElements getStateChangeAccess() {
		return pStateChange;
	}
	
	public ParserRule getStateChangeRule() {
		return getStateChangeAccess().getRule();
	}
	
	//GoToChapter:
	//    'GOTOCHAPTER' 'chapterId' '=' chapterId=[Chapter|ID] ',' 'entrance' '=' entrance=[StartPoint|ID];
	public GoToChapterElements getGoToChapterAccess() {
		return pGoToChapter;
	}
	
	public ParserRule getGoToChapterRule() {
		return getGoToChapterAccess().getRule();
	}
	
	//enum Type:
	//    TEXT = 'TEXT' |
	//    NUMBER = 'NUMBER' |
	//    BOOLEAN = 'YES/NO' |
	//    LIST = 'LIST'
	//;
	public TypeElements getTypeAccess() {
		return eType;
	}
	
	public EnumRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//enum Operator:
	//    ASSIGN = '=' |
	//    PLUS = '+' |
	//    MINUS = '-' |
	//    MULTIPLY = '*' |
	//    DIVIDE = '/'
	//;
	public OperatorElements getOperatorAccess() {
		return eOperator;
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//Value:
	//    STRING | INT | ('true' | 'false')
	//;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
