/*
 * generated by Xtext 2.37.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getScenarioAccess().getAlternatives_6(), "rule__Scenario__Alternatives_6");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getValueAccess().getAlternatives_2(), "rule__Value__Alternatives_2");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
			builder.put(grammarAccess.getStoryAccess().getGroup(), "rule__Story__Group__0");
			builder.put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
			builder.put(grammarAccess.getChapterAccess().getGroup(), "rule__Chapter__Group__0");
			builder.put(grammarAccess.getStartPointAccess().getGroup(), "rule__StartPoint__Group__0");
			builder.put(grammarAccess.getScenarioAccess().getGroup(), "rule__Scenario__Group__0");
			builder.put(grammarAccess.getTextAccess().getGroup(), "rule__Text__Group__0");
			builder.put(grammarAccess.getChoiceAccess().getGroup(), "rule__Choice__Group__0");
			builder.put(grammarAccess.getChoiceAccess().getGroup_8(), "rule__Choice__Group_8__0");
			builder.put(grammarAccess.getChoiceAccess().getGroup_8_2(), "rule__Choice__Group_8_2__0");
			builder.put(grammarAccess.getStateChangeAccess().getGroup(), "rule__StateChange__Group__0");
			builder.put(grammarAccess.getGoToChapterAccess().getGroup(), "rule__GoToChapter__Group__0");
			builder.put(grammarAccess.getStoryAccess().getNameAssignment_1(), "rule__Story__NameAssignment_1");
			builder.put(grammarAccess.getStoryAccess().getStateAssignment_3(), "rule__Story__StateAssignment_3");
			builder.put(grammarAccess.getStoryAccess().getChaptersAssignment_4(), "rule__Story__ChaptersAssignment_4");
			builder.put(grammarAccess.getStateAccess().getPropertiesAssignment_2(), "rule__State__PropertiesAssignment_2");
			builder.put(grammarAccess.getPropertyAccess().getNameAssignment_3(), "rule__Property__NameAssignment_3");
			builder.put(grammarAccess.getPropertyAccess().getTypeAssignment_7(), "rule__Property__TypeAssignment_7");
			builder.put(grammarAccess.getPropertyAccess().getValueAssignment_11(), "rule__Property__ValueAssignment_11");
			builder.put(grammarAccess.getChapterAccess().getNameAssignment_3(), "rule__Chapter__NameAssignment_3");
			builder.put(grammarAccess.getChapterAccess().getEntrancesAssignment_8(), "rule__Chapter__EntrancesAssignment_8");
			builder.put(grammarAccess.getChapterAccess().getScenariosAssignment_11(), "rule__Chapter__ScenariosAssignment_11");
			builder.put(grammarAccess.getStartPointAccess().getNameAssignment_0(), "rule__StartPoint__NameAssignment_0");
			builder.put(grammarAccess.getStartPointAccess().getScenarioIdAssignment_2(), "rule__StartPoint__ScenarioIdAssignment_2");
			builder.put(grammarAccess.getScenarioAccess().getNameAssignment_3(), "rule__Scenario__NameAssignment_3");
			builder.put(grammarAccess.getScenarioAccess().getTextAssignment_5(), "rule__Scenario__TextAssignment_5");
			builder.put(grammarAccess.getScenarioAccess().getChoicesAssignment_6_0(), "rule__Scenario__ChoicesAssignment_6_0");
			builder.put(grammarAccess.getScenarioAccess().getGotoAssignment_6_2(), "rule__Scenario__GotoAssignment_6_2");
			builder.put(grammarAccess.getTextAccess().getTextAssignment_1(), "rule__Text__TextAssignment_1");
			builder.put(grammarAccess.getChoiceAccess().getScenarioIdAssignment_3(), "rule__Choice__ScenarioIdAssignment_3");
			builder.put(grammarAccess.getChoiceAccess().getDescriptionAssignment_7(), "rule__Choice__DescriptionAssignment_7");
			builder.put(grammarAccess.getChoiceAccess().getStateChangesAssignment_8_1(), "rule__Choice__StateChangesAssignment_8_1");
			builder.put(grammarAccess.getChoiceAccess().getStateChangesAssignment_8_2_1(), "rule__Choice__StateChangesAssignment_8_2_1");
			builder.put(grammarAccess.getStateChangeAccess().getVariableAssignment_0(), "rule__StateChange__VariableAssignment_0");
			builder.put(grammarAccess.getStateChangeAccess().getOperatorAssignment_1(), "rule__StateChange__OperatorAssignment_1");
			builder.put(grammarAccess.getStateChangeAccess().getValueAssignment_2(), "rule__StateChange__ValueAssignment_2");
			builder.put(grammarAccess.getGoToChapterAccess().getChapterIdAssignment_3(), "rule__GoToChapter__ChapterIdAssignment_3");
			builder.put(grammarAccess.getGoToChapterAccess().getEntranceAssignment_7(), "rule__GoToChapter__EntranceAssignment_7");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
